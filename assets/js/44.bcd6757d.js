(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{376:function(a,t,v){"use strict";v.r(t);var _=v(42),r=Object(_.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h1",{attrs:{id:"控件布局初步"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#控件布局初步"}},[a._v("#")]),a._v(" 控件布局初步")]),a._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),v("p",[a._v("本节内容：")]),a._v(" "),v("p",[a._v("1.控件布局的基本概念；")]),a._v(" "),v("p",[a._v("2.控件布局的种类；")]),a._v(" "),v("p",[a._v("3.各类布局方法的特点；")]),a._v(" "),v("p",[a._v("4.线性布局的基本使用方法；")])]),a._v(" "),v("h2",{attrs:{id:"一．控件布局的基本概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一．控件布局的基本概念"}},[a._v("#")]),a._v(" 一．控件布局的基本概念")]),a._v(" "),v("h3",{attrs:{id:"_1-什么是控件布局？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是控件布局？"}},[a._v("#")]),a._v(" 1.什么是控件布局？")]),a._v(" "),v("p",[a._v("在Android官方文档中并没有为控件布局给出一个精确的定义，在此引用MARS所下的定义：")]),a._v(" "),v("p",[a._v("所谓的控件布局方法，就是指控制控件在Activity中的位置、颜色、大小以及其他控件样式属性的方法。")]),a._v(" "),v("p",[a._v("控件布局的作用：控件布局不仅仅是样式的好看，更重要的是它的实用性，例如返回按钮的位置、点击按钮的大小……。")]),a._v(" "),v("h3",{attrs:{id:"_2-在android平台下，控件的布局的方法有两种："}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-在android平台下，控件的布局的方法有两种："}},[a._v("#")]),a._v(" 2.在Android平台下，控件的布局的方法有两种：")]),a._v(" "),v("p",[a._v("（1）使用布局文件完成控件布局；")]),a._v(" "),v("p",[a._v("（2）在java代码中完成控件布局；")]),a._v(" "),v("p",[a._v("这两种方法有各自使用的场景，第一种方法使用起来非常的方便，因为IDE中有可视化界面，可以直接拖过来使用，但是这种方式非常死板，不灵活，而使用java代码完成控件布局的方法则可以根据程序的需要动态改变相应的控件，比较灵活，但是使用起来非常复杂，所以通常来说我们把它叫做动态布局。这两种方法各自有各自的好处，没有谁好谁坏，只不过对应于使用场合的不同，才体现出使用哪一种方式会更好更适合。")]),a._v(" "),v("h2",{attrs:{id:"二．控件布局的种类（布局方法的分类）以及各类布局方法的特点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二．控件布局的种类（布局方法的分类）以及各类布局方法的特点"}},[a._v("#")]),a._v(" 二．控件布局的种类（布局方法的分类）以及各类布局方法的特点")]),a._v(" "),v("p",[a._v("总体上来讲，布局方法的分类也有两种：")]),a._v(" "),v("h3",{attrs:{id:"_1-使用android所提供的layout这种布局方式；最常用的有两种："}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用android所提供的layout这种布局方式；最常用的有两种："}},[a._v("#")]),a._v(" 1.使用Android所提供的Layout这种布局方式；最常用的有两种：")]),a._v(" "),v("p",[a._v("Linear Layout（线性布局）和Relative Layout（相对布局），")]),a._v(" "),v("p",[a._v("其中，又以Relative Layout这种方式最常用。")]),a._v(" "),v("p",[a._v("Linear Layout就是要么竖着一条一条的布局，要么横着一条一条的布局（就像本子上的横线），非常的简单。")]),a._v(" "),v("p",[a._v("Relative Layout则是以控件的相对位置来决定布局的方式，这种方式更复杂一些，但功能更强大。这种方式跟Web开发中div+css的布局方式类似。")]),a._v(" "),v("h3",{attrs:{id:"_2-使用view，其实呢主要使用adapter"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用view，其实呢主要使用adapter"}},[a._v("#")]),a._v(" 2.使用View，其实呢主要使用Adapter")]),a._v(" "),v("p",[a._v("像ListView和GirdView都是Adapter 的子类。")]),a._v(" "),v("p",[a._v("ListView就是定义一个列表，在每行里面都可以称之为一项（就像本子上的每一行空格），在每行当中都可以显示。")]),a._v(" "),v("p",[a._v("GirdView就是网格布局，就是把屏幕分成一个个的网格，格子里面放上要显示的内容。")]),a._v(" "),v("p",[a._v("这就是第二种控件布局的方法，这种方法相对来讲就高级一点，但也比较麻烦，但是这类布局也非常重要，尤其是ListView，以后用的非常多。")]),a._v(" "),v("h2",{attrs:{id:"三．线性布局的基本使用方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三．线性布局的基本使用方法"}},[a._v("#")]),a._v(" 三．线性布局的基本使用方法")]),a._v(" "),v("p",[a._v("先定义一个Linear Layout，然后再指定好长度、宽度，再去选择好排列方向。")]),a._v(" "),v("p",[a._v("Linear Layout如果是垂直方向（vertical），那么他就是自上向下排版的，第一个控件占据第一行，第二个控件占据第二行，以此类推，Linear Layout（线性布局）这种布局方式不管这一行中的控件是多大，它都占据着这一整行，不会让别的控件占据在自己所处的这一行。")]),a._v(" "),v("p",[a._v("Linear Layout如果是水平方向（horizontal），它就会水平摆放，第一个控件占据第一列，第二个控件占据第二列，以此类推，每一个控件都会占据这一整列，别的控件不会跟它处在同一列。")]),a._v(" "),v("p",[a._v("以上就是最简单的线性布局的基本使用方法。")]),a._v(" "),v("h2",{attrs:{id:"四．android-ui开发中最重要的三个概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#四．android-ui开发中最重要的三个概念"}},[a._v("#")]),a._v(" 四．Android UI开发中最重要的三个概念")]),a._v(" "),v("p",[a._v("Activity、控件以及布局")])])}),[],!1,null,null,null);t.default=r.exports}}]);